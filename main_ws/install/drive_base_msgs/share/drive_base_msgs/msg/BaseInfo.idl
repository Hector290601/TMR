// generated from rosidl_adapter/resource/msg.idl.em
// with input from drive_base_msgs/msg/BaseInfo.msg
// generated code does not contain a copyright notice

#include "builtin_interfaces/msg/Time.idl"

module drive_base_msgs {
  module msg {
    module BaseInfo_Constants {
      const uint8 POWER_SUPPLY_STATUS_UNKNOWN = 0;
      const uint8 POWER_SUPPLY_STATUS_CHARGING = 1;
      const uint8 POWER_SUPPLY_STATUS_DISCHARGING = 2;
      const uint8 POWER_SUPPLY_STATUS_NOT_CHARGING = 3;
      const uint8 POWER_SUPPLY_STATUS_FULL = 4;
      @verbatim (language="comment", text=
        "OR'able bits to communicate current safety state as determined by base sensors")
      const uint16 SAFETY_STATE_OPERATIONAL = 1;
      const uint16 SAFETY_STATE_LOW_SPEED = 2;
      const uint16 SAFETY_STATE_NO_FORWARD = 4;
      const uint16 SAFETY_STATE_NO_BACKWARD = 8;
      const uint16 SAFETY_STATE_NO_ROTATE = 16;
    };
    struct BaseInfo {
      @verbatim (language="comment", text=
        "identifying information" "\n"
        "a, hopefully unique, id")
      uint32 hw_id;

      @verbatim (language="comment", text=
        "timestamp as returned by the hardware")
      uint32 hw_timestamp;

      @verbatim (language="comment", text=
        "wall clock timestamp")
      builtin_interfaces::msg::Time stamp;

      @verbatim (language="comment", text=
        "position information (estimated, relative to starting pose)")
      float x;

      float y;

      float orientation;

      @verbatim (language="comment", text=
        "should we add z?" "\n"
        "velocity information")
      float forward_velocity;

      float rotational_velocity;

      @verbatim (language="comment", text=
        "battery state" "\n"
        "range: 0-100. current battery voltage as percent of nominal.")
      uint8 battery_voltage_pct;

      @verbatim (language="comment", text=
        "one of the constants above")
      uint8 power_supply;

      @verbatim (language="comment", text=
        "diagnostic information" "\n"
        "motor overcurrent detected")
      boolean overcurrent;

      @verbatim (language="comment", text=
        "True if forward direction is blocked by an obstacle")
      boolean blocked;

      @verbatim (language="comment", text=
        "True if the robot is in collision (usually detected via bumper)")
      boolean in_collision;

      @verbatim (language="comment", text=
        "True if the robot has detected a cliff in the forward direction")
      boolean at_cliff;

      uint16 safety_state;
    };
  };
};
